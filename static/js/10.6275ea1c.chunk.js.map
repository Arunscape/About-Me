{"version":3,"sources":["components/AboutCard/AboutCard.tsx","util/index.ts"],"names":["useStyles","makeStyles","theme","createStyles","card","maxWidth","title","fontSize","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","width","height","refreshJoke","float","AboutCard","classes","React","useState","expanded","setExpanded","history","useReactRouter","joke","setJoke","getJoke","url","fetch","then","res","json","data","setTheJoke","a","jokeResponse","backupJokeResponse","useEffect","buttons","route","icon","newTab","className","src","subheader","disableSpacing","map","disableFocusListener","key","aria-label","onClick","openNewTab","push","clsx","aria-expanded","in","timeout","unmountOnExit","setup","delivery","paragraph","window","open"],"mappings":"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","file":"static/js/10.6275ea1c.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport useReactRouter from 'use-react-router';\n\nimport GithubCircle from 'mdi-material-ui/GithubCircle'\nimport Linkedin from 'mdi-material-ui/Linkedin'\nimport At from 'mdi-material-ui/At'\nimport Coffee from 'mdi-material-ui/Coffee'\nimport ClipboardTextOutline from 'mdi-material-ui/ClipboardTextOutline'\nimport Refresh from 'mdi-material-ui/Refresh'\n\nimport { openNewTab } from '../../util'\nimport { Icon } from '@material-ui/core';\n\nconst GITHUB_AVATAR = \"https://avatars0.githubusercontent.com/u/8227297\"\nconst JOKE_API = \"https://sv443.net/jokeapi/category/Programming\"\nconst JOKE_API_BACKUP = \"https://sv443.ddns.net/jokeapi/category/Programming\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      maxWidth: 400,\n    },\n    title: {\n      fontSize: 20,\n    },\n    expand: {\n      transform: 'rotate(0deg)',\n      marginLeft: 'auto',\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest,\n      }),\n    },\n    expandOpen: {\n      transform: 'rotate(180deg)',\n    },\n    avatar: {\n      width: 80,\n      height: 80\n    },\n    refreshJoke: {\n      float: 'right'\n    },\n  }),\n);\n\nconst AboutCard = () => {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const { history } = useReactRouter();\n\n\n  interface jokeapiResponse {\n    category: string,\n    type: string,\n    joke?: string,\n    setup?: string,\n    delivery?: string,\n    id: number,\n  }\n  const [joke, setJoke] = React.useState<jokeapiResponse | null>(null)\n\n  const getJoke = (url: string) =>\n    fetch(url)\n      .then(res => res.json())\n      .then(data => data)\n\n  const setTheJoke = async () => {\n    const jokeResponse = await getJoke(JOKE_API);\n\n    if (!jokeResponse) {\n      const backupJokeResponse = await getJoke(JOKE_API_BACKUP);\n      setJoke(backupJokeResponse);\n    }\n\n    setJoke(jokeResponse);\n  }\n\n  React.useEffect(() => {\n    setTheJoke();\n  }, [])\n\n  const buttons = [\n    {\n      title: 'Github',\n      route: '/github',\n      icon: <GithubCircle />,\n      newTab: true,\n    },\n    {\n      title: 'Linkedin',\n      route: '/linkedin',\n      icon: <Linkedin />,\n      newTab: true,\n    },\n    {\n      title: 'Email',\n      route: '/email',\n      icon: <At />,\n      newTab: true,\n    },\n    {\n      title: \"Résumé\",\n      route: '/resume',\n      icon: <ClipboardTextOutline />,\n      newTab: false,\n    },\n    {\n      title: \"Projects\",\n      route: \"/projects\",\n      icon: <Coffee />,\n      newTab: false,\n    }\n  ]\n\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        classes={{\n          title: classes.title\n        }}\n        avatar={\n          <Avatar className={classes.avatar} src={GITHUB_AVATAR} />\n        }\n        title=\"Arun Woosaree\"\n        subheader=\"4th Year Computer Software Engineering Student at the University of Alberta\"\n      />\n      <CardActions disableSpacing>\n\n\n        {buttons.map(({ title, route, icon, newTab }) => (\n          <Tooltip\n            disableFocusListener\n            title={title}\n            key={title}\n          >\n            <IconButton\n              aria-label={title}\n              onClick={newTab ? () => openNewTab(route) : () => history.push(route)}\n            >\n              {icon}\n            </IconButton>\n          </Tooltip>\n        ))}\n\n        <Tooltip disableFocusListener title=\"Random Joke!\">\n          <IconButton\n            className={clsx(classes.expand, {\n              [classes.expandOpen]: expanded,\n            })}\n            onClick={() => setExpanded(!expanded)}\n            aria-expanded={expanded}\n            aria-label=\"Show more\"\n          >\n            <ExpandMoreIcon />\n          </IconButton>\n        </Tooltip>\n      </CardActions>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          {\n            joke && joke.joke && (\n              <Typography>\n                {joke.joke}\n              </Typography>\n            )\n          }\n          {\n            joke && joke.setup && joke.delivery && (\n              <>\n                <Typography paragraph>\n                  {joke.setup}\n                </Typography>\n\n                <Typography>\n                  {joke.delivery}\n                </Typography>\n              </>\n            )\n          }\n          {!joke && <div>Loading Joke...</div>}\n          <Tooltip\n            disableFocusListener\n            title=\"Get a new joke\"\n            className={classes.refreshJoke}\n          >\n            <IconButton\n              onClick={() => setTheJoke()}\n            >\n              <Refresh />\n            </IconButton>\n          </Tooltip>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n}\n\nexport default AboutCard;","export const openNewTab = (url: string) => window.open(url, '_blank')"],"sourceRoot":""}